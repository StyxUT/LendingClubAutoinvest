### PlainTasks task tracking TODO list###

How to use PlainTask  
  https://packagecontrol.io/packages/PlainTasks ->  ⌘ + shift + u -> will open URL under cursor
  ☐ ⌘ + enter or ⌘ + i: new task
  ☐ ⌘ + d: toggle task as completed
  ☐ ⌘ + c: toggle task as cancelled
  ☐ ⌘ + shift + a: archive the done tasks

  ☐ ⌘ + control + up/down:  move tasks up and down
  ☐ ⌘ + r: see a list of projects and quickly jump between them


GitHub: 
 ☐ Consider making project private
 ☐ Add GitHub readme
   ☐ Add Purpose
        ###############################
        #    Notes:
        #    It's intended for this script to be scheduled to run about one minute prior to the time LendingClub releases new loans. 
        #    Currently LendingClub releases new loans at 7 AM, 11 AM, 3 PM and 7 PM (MST) each day.
        #    This is ideally handled by the clock.rb/clockworkd/colckworker.sh setup 
        ###############################
   ☐ Add Setup instructions
        ###############################
        # Add instructons for using clock.rb with /etc/init.d/clockworker.sh
        # Add instruction for using clockworkd and clockwork
        # (recomend using foreman/upstart)
        ###############################
   ☐ Add install and run instructions 
        ###############################
        #  Install Instructions:
        #   Update values in example_configatron.rb then rename file to configatron.rb
        #    Rotate logs using logrotate
        #    brew install logrotate (OS X only)
        #    mkdir /var/log/lending_club_autoinvestor/
        #       ensure executing process has write access to directory
        #        sudo chown -R <user_name> /var/log/lending_club_autoinvestor/
        #    add below to "/etc/logrotate.d/lending_club_autoinvestor" file:
        #      /var/log/lending_club_autoinvestor/*.log {
        #            weekly
        #            missingok
        #            rotate 7
        #            compress
        #            notifempty
        #        nocreate
        #      }
        #    modify configuration as needed (man logrotate)
        ###############################
    ☐ clockworkd start/stop
      ☐ update paths for "restructure" branch
        ###############################
        #   clockworkd Start/Stop
        #    to start: $ bundle exec clockworkd start --log -c ~/projects/LendingClubAutoinvest/clock.rb
        #    to stop: $ bundle exec clockworkd stop --log -c ~/projects/LendingClubAutoinvest/clock.rb
        ###############################

Refactoring:
  ☐ Replace washbulelt with json-rest to have better controll over resturn result @PushBullet
    Push AIP URL:  https://docs.pushbullet.com/#create-push
    ☐ refactor test and enable : test_send_message_can_fail

AutoInvestor:
 ☐ Implement Unit Tests @high
   ✔ decide on testing framework  @done (16-11-22 02:45)
     # minitest:  tutorial url: https://launchschool.com/blog/assert-yourself-an-introduction-to-minitest
       decided to use Rake to run tests @done (16-11-22 16:34)
     ✔ Test Account class @done (16-11-22 18:29)
     ✔ Test Push Bullet class @done (16-11-28 18:40)
     ☐ Test Loans class
       ✔ assert get_owned_loans returns loans @done (16-11-28 22:42)
       ✔ assert get_owned_loans is a RestClient respons @done (16-11-28 22:42)
       ✔ assert owned_loans_list is a hash @done (16-11-28 22:42)
       ☐ Verify that failed_purchase_response.json test file still works after restructure
         ☐ make proper JSON data (if necessary)
       ☐ Verify that mixed_purchase_response.json test file still works after restructure
         ☐ make proper JSON file (if necessary)
       ☐ Verify that available_loans.json test file still works after restructure
         ☐ make proper JSON file (if necessary)
 ☐ Improve order response messaging @low
    Currently only supports successful purchases, and no longer in funding
 ☐ Add conditional investment options bassed on account factors @feature @low
   ☐ Allow investing different amounts depending on account factors @feature 
       E.g. If available funds is larger than $X.XX and number of owned notes is > X,XXX invest $XX.XX per note instead of $XX.XX
   ☐ Allow restricting the configatron.max_default_prob: based on account factors
       E.g. If available funds is less than $X.XX be more restrictive
 ☐ Allow automatic transfers based on various account conditions @feature
   ☐ based on available cash
 ☐ Add configatron option for setting upper and lower limit used by filter


Folio:
  #Folio API URL: https://www.lendingclub.com/foliofn/folioInvestingAPIDocument%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.action
  ☐ Sell loans on Folio via Folio's API @critical
    ☐ Configatron setting to enable/disable Folio selling
    ☐ Review owned loans for sale
    ☐ Reprice daily
    ☐ Test Folio class
       ✔ assert late_loans contains the correct number of late loans after filter @done (16-11-28 22:31)
       ☐ it properly determines note price
       ☐ it creates a proper sell order
       ☐ it reports successful sell order
       ☐ it reports on failed sell order
    ☐ Determine note price
      Calculation: 
        #days delinquent: lastPaymentDate - current date
        #days delinquent, YTM; defaut rate - 10%
      ☐ Evaluate based on other notes from given loan
      ☐ Evaluate based on default probability formula
        ☐ get this from the spreadsheet
      ☐ Evaluate based on Default Predictor result
  ☐ Evaluate owned loans with Defaut Predictor for queueing for folio sale
  ☐ Update clock.rb file to schedule note sales (daily?)
    ☐ stop and start clockowrkd service



Default Predictor:
 ☐ Fully implement Default Predictor
   ☐ Refactor default predictor into own class
   ☐ Ensure service is running by calling get/version API call
     ☐ If it isn't running connect and start the service
       ☐ Possibly use start_predictor script
 ☐ Use HTTPS for API call
   ☐ Obtain certificat
   ☐ Update nginx configuration