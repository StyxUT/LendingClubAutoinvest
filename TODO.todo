### PlainTasks task tracking ###

How to use PlainTask  
  https://packagecontrol.io/packages/PlainTasks (☐ ⌘ + shift + u -> will open URL under cursor)
  ☐ ⌘ + enter or ⌘ + i: new task
  ☐ ⌘ + d: toggle task as completed
  ☐ ⌘ + c: toggle task as cancelled
  ☐ ⌘ + shift + a: archive the done tasks

  ☐ ⌘ + control + up/down:  move tasks up and down
  ☐ ⌘ + r: see a list of projects and quickly jump between them

GitHub: 
 ☐ Consider making project private
 ☐ Add GitHub readme
   ☐ Add Purpose
        ###############################
        #    Notes:
        #    It's intended for this script to be scheduled to run about one minute prior to the time LendingClub releases new loans. 
        #    Currently LendingClub releases new loans at 7 AM, 11 AM, 3 PM and 7 PM (MST) each day.
        #    This is ideally handled by the clock.rb/clockworkd/colckworker.sh setup 
        ###############################
   ☐ Add Setup instructions
        ###############################
        # Add instructons for using clock.rb with /etc/init.d/clockworker.sh
        # Add instruction for using clockworkd and clockwork
        # (recomend using foreman/upstart)
        ###############################
   ☐ Add install and run instructions 
        ###############################
        #  Install Instructions:
        #   Update values in example_configatron.rb then rename file to configatron.rb
        #    Rotate logs using logrotate
        #    brew install logrotate (OS X only)
        #    mkdir /var/log/lending_club_autoinvestor/
        #       ensure executing process has write access to directory
        #        sudo chown -R <user_name> /var/log/lending_club_autoinvestor/
        #    add below to "/etc/logrotate.d/lending_club_autoinvestor" file:
        #      /var/log/lending_club_autoinvestor/*.log {
        #            weekly
        #            missingok
        #            rotate 7
        #            compress
        #            notifempty
        #        nocreate
        #      }
        #    modify configuration as needed (man logrotate)
        ###############################
    ☐ clockworkd start/stop
        ###############################
        #   clockworkd Start/Stop
        #    to start: $ bundle exec clockworkd start --log -c ~/projects/LendingClubAutoinvest/clock.rb
        #    to stop: $ bundle exec clockworkd stop --log -c ~/projects/LendingClubAutoinvest/clock.rb
        ###############################

AutoInvestor:
 ☐ Implement Unit Tests @high
   ☐ decide on testing framework
 ☐ Improve order response messaging @low
    Currently only supports successful purchases, and no longer in funding
 ☐ Allow investing different amounts depending on account factors @feature @low
    E.g. If available funds is larger than $300 and number of owned notes is > 500 invest $50 per note instead of $25
 ☐ Allow automatic transfers based on various account conditions @feature
   ☐ based on available cash

Folio: 
  ☐ Sell loans on Folio via Folio's API @high
    ☐ Review owned loans for sale
    ☐ Reprice daily
    ☐ Determine price
      ☐ Evaluate based on other notes from given loan
      ☐ Evaluate based on default probability
  ☐ Evaluate owned loand loans with Defaut Predictor for queueing for folio sale 

Default Predictor:
 ☐ Fully implement Defautl Predictor
   ☐ Refactor default predictor into own class
   ☐ Ensure service is running by calling get/version API call
     ☐ If it isn't running connect and start the service
       ☐ Possibly use start_predictor script
 ☐ Use HTTPS for API call
   ☐ Obtain certificat
   ☐ Update nginx configuration